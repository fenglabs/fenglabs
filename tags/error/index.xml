<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>error on 晒春风的博客 - 春风十里不如你 - Ten miles of spring breeze is not as good as you</title>
    <link>https://shaichunfeng.com/tags/error/</link>
    <description>Recent content in error on 晒春风的博客 - 春风十里不如你 - Ten miles of spring breeze is not as good as you</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>design &amp; develop by shaichunfeng &amp;copy;</copyright>
    <lastBuildDate>Mon, 19 Jul 2021 08:00:12 +0800</lastBuildDate><atom:link href="https://shaichunfeng.com/tags/error/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go系列教程（三十一） | 自定义错误(Custom Error)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/31-custom-error/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:12 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/31-custom-error/</guid>
      <description>在上一教程里，我们学习了 Go 中的错误是如何表示的，并学习了如何处理标准库里的错误。我们还学习了从标准库的错误中提取更多的信息。
在本教程中，我们会学习如何创建我们自己的自定义错误，并在我们创建的函数和包中使用它。我们会使用与标准库中相同的技术，来提供自定义错误的更多细节信息。
使用 New 函数创建自定义错误 创建自定义错误最简单的方法是使用 errors 包中的 New 函数。
在使用 New 函数 创建自定义错误之前，我们先来看看 New 是如何实现的。如下所示，是 errors 包 中的 New 函数的实现。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Package errors implements functions to manipulate errors. package errors // New returns an error that formats as the given text.</description>
    </item>
    
    <item>
      <title>Go系列教程（三十） | 错误处理(Error Handle)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/30-error-handle.md/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:11 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/30-error-handle.md/</guid>
      <description>什么是错误？ 错误表示程序中出现了异常情况。比如当我们试图打开一个文件时，文件系统里却并没有这个文件。这就是异常情况，它用一个错误来表示。
在 Go 中，错误一直是很常见的。错误用内建的 error 类型来表示。
就像其他的内建类型（如 int、float64 等），错误值可以存储在变量里、作为函数的返回值等等。
示例 现在我们开始编写一个示例，该程序试图打开一个并不存在的文件。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { f, err := os.Open(&amp;#34;/test.txt&amp;#34;) if err != nil { fmt.Println(err) return } fmt.Println(f.Name(), &amp;#34;opened successfully&amp;#34;) } 在 playground 中运行</description>
    </item>
    
  </channel>
</rss>
