<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell on 晒春风的博客 - 春风十里不如你 - Ten miles of spring breeze is not as good as you</title>
    <link>https://shaichunfeng.com/tags/shell/</link>
    <description>Recent content in shell on 晒春风的博客 - 春风十里不如你 - Ten miles of spring breeze is not as good as you</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>design &amp; develop by shaichunfeng &amp;copy;</copyright>
    <lastBuildDate>Mon, 28 Jun 2021 12:31:07 +0800</lastBuildDate><atom:link href="https://shaichunfeng.com/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git 推送LSF（大文件）到远程</title>
      <link>https://shaichunfeng.com/post/2021/06/28/git-push-contain-lsf-file/</link>
      <pubDate>Mon, 28 Jun 2021 12:31:07 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/06/28/git-push-contain-lsf-file/</guid>
      <description>项目中包含大上件时
推送已有项目到新仓库时报错 1 2 3 4 5 6 7 8 9 10 11 12 $ git push -u origin master 枚举对象中: 1585, 完成. 对象计数中: 100% (1585/1585), 完成. 使用 4 个线程进行压缩 压缩对象中: 100% (1466/1466), 完成. 写入对象中: 100% (1585/1585), 13.66 MiB | 6.49 MiB/s, 完成. 总共 1585（差异 667），复用 0（差异 0），包复用 0 remote: Resolving deltas: 100% (667/667), done.</description>
    </item>
    
    <item>
      <title>使用Shell脚本新建博文生成多个语言Markdown文件</title>
      <link>https://shaichunfeng.com/post/2021/05/26/shell-scirpt-code-structure/</link>
      <pubDate>Tue, 25 May 2021 01:34:23 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/05/26/shell-scirpt-code-structure/</guid>
      <description>在使用Hugo写博客的时候，添加一遍博文，如果内容是支持多语言的话，添加每种语言markdown文件都需要执行一次Hugo命令，着实非常不方便，于是乎写一个Shell脚本就可以解决这个非常不愉快的操作体验，具体可以写一个Shell脚本去一次性的完成这个重复而没有任何意义的操作。仔细分析一下这个要写的Shell脚本，其实非常简单就可以实现: 定义一个目录常量，定义一语言数组，让用户输入三个参数，其中前两个是必传参数，最后一个参数是可选参数，依次表示，要生成的markdown文件存放目录，markdown文件名，以及是否要使用日期目录。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 #!</description>
    </item>
    
    <item>
      <title>shell编程快速入门</title>
      <link>https://shaichunfeng.com/post/2021/05/19/post-9/</link>
      <pubDate>Wed, 19 May 2021 23:19:11 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/05/19/post-9/</guid>
      <description>变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/bin/bash # 1. 变量的定义和使用 username=helloshaohua echo &amp;#34;1. $username&amp;#34; # 2. 另一种定义方式 course=&amp;#34;linux shell program&amp;#34; echo 2. ${course} # 3. 只读变量 readonly course # course=&amp;#34;Go program&amp;#34; # available.sh: line 13: course: readonly variable.</description>
    </item>
    
    <item>
      <title>CentOS7 相关操作</title>
      <link>https://shaichunfeng.com/post/2020/04/05/centos7-related-operations/</link>
      <pubDate>Sun, 05 Apr 2020 22:34:24 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2020/04/05/centos7-related-operations/</guid>
      <description>记录一下CentOS7日常操作，以便后期查看，温故之用，好记性不如烂笔头哦！🎉🎉🎉
开机启动服务 添加服务到chkconfig配置 1 $ chkconfig --add servername 开启服务开机启动 1 $ chkconfig docker on 资源管理 查看系统内存大小及使用情况 1 $ free -h 查看系统磁盘大小及使用情况 1 $ df -h 文件处理 查看文件的前几行 1 $ head -n number file 查看文件的后几行 1 $ tail -n number file 从文件后几行开始实时查看文件内容 这个很常用，一般文件都是追加写，而不是从头插入写，尤其是调试、监控时很有用
1 $ tail -f -n number file 查看文件的中间部分行 1 $ sed -n &amp;#39;StartNumber,EndNumber(p)&amp;#39; filename 用户管理 查看所有用户 1 $ cat /etc/passwd 查看所有用户组 1 $ cat /etc/group 端口占用 netstat命令用来打印Linux中网络系统的状态信息，可让你得知整个Linux系统的网络情况。</description>
    </item>
    
  </channel>
</rss>
