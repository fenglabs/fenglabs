<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JSON on 晒春风的博客 - 春风十里不如你 - Ten miles of spring breeze is not as good as you</title>
    <link>https://shaichunfeng.com/tags/json/</link>
    <description>Recent content in JSON on 晒春风的博客 - 春风十里不如你 - Ten miles of spring breeze is not as good as you</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>design &amp; develop by shaichunfeng &amp;copy;</copyright>
    <lastBuildDate>Thu, 17 Jun 2021 15:17:04 +0800</lastBuildDate><atom:link href="https://shaichunfeng.com/tags/json/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JSON 转换到 Go 结构体类型</title>
      <link>https://shaichunfeng.com/post/2021/06/17/json-to-go-structure/</link>
      <pubDate>Thu, 17 Jun 2021 15:17:04 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/06/17/json-to-go-structure/</guid>
      <description>json-to-go 该工具立即将 JSON 转换为 Go 类型定义。在左侧粘贴一个 JSON 结构，右侧将生成等效的 Go 类型，您可以将其粘贴到您的程序中。该脚本必须做出一些假设，因此请仔细检查输出！
服务地址 JSON-TO-GO
示例截图 </description>
    </item>
    
    <item>
      <title>格式化curl返回的JSON数据</title>
      <link>https://shaichunfeng.com/post/2021/05/27/format-the-json-data-returned-by-curl/</link>
      <pubDate>Thu, 27 May 2021 10:01:05 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/05/27/format-the-json-data-returned-by-curl/</guid>
      <description>在开发的过程中会使用CURL命令请求API接口，而一般情况下API接口也是返回JSON数据，但是如果直接使用 curl -X GET https://news-at.zhihu.com/api/4/news/latest 这种方式访问API接口的话，你会发现终端输出的是一行JSON数据，如果可以美化一下JSON数据在终端输出岂不美哉~
二、格式化CURL返回的JSON数据有两种方式 分别是 PYTHON格式化 和 NODEJS格式化。
2.1、PYTHON格式化 在CURL命令后面添加 | python -m json.tool 即可。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 $ curl -X GET https://news-at.</description>
    </item>
    
    <item>
      <title>Golang JSON RPC 使用</title>
      <link>https://shaichunfeng.com/post/2020/05/11/golang-json-rpc-use/</link>
      <pubDate>Mon, 11 May 2020 23:20:55 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2020/05/11/golang-json-rpc-use/</guid>
      <description>JSON-RPC，是一个无状态且轻量级的远程过程调用传送协议，其传递内容主要以JSON数据为主，相较于一般的 RESTFul 通过 URL 地址，如 GET /student 调用远程服务器，JSON-RPC直接在内容中定义了想要调用的方法名称如，@@{&amp;ldquo;id&amp;rdquo;: 123456, &amp;ldquo;method&amp;rdquo;: &amp;ldquo;Service.Division&amp;rdquo;, &amp;ldquo;params&amp;rdquo;: [{&amp;ldquo;A&amp;rdquo;: 88, &amp;ldquo;B&amp;rdquo;: 6}]}@@，这也令开发者不会陷于该使用 PUT 还是 POST 的问题中。在RPC服务定义中主要定义一些数据结构及其相关的处理规则。在Golang中所有注册的RPC服务方法需要满足三个条件，第一方法有一个输入参数，第二方法有一个指针类型的输出参数，第三方法返回一个error类型的返回值，满足这三个条件即可注册为RPC服务方法。在Golang中如何使用请看以下内容&amp;hellip;
示例项目目录结构 1 2 3 4 5 6 7 8 9 10 11 12 $ tree . ├── README.md ├── client │ └── demo │ └── demo.go ├── server │ └── demo │ └── demo.</description>
    </item>
    
  </channel>
</rss>
