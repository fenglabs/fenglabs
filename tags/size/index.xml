<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>size on 晒春风的博客 - 春风十里不如你 - Ten miles of spring breeze is not as good as you</title>
    <link>https://shaichunfeng.com/tags/size/</link>
    <description>Recent content in size on 晒春风的博客 - 春风十里不如你 - Ten miles of spring breeze is not as good as you</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>design &amp; develop by shaichunfeng &amp;copy;</copyright>
    <lastBuildDate>Sat, 09 May 2020 22:59:44 +0800</lastBuildDate><atom:link href="https://shaichunfeng.com/tags/size/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang格式化文件大小到可视化大小</title>
      <link>https://shaichunfeng.com/post/2020/05/09/golang-formats-file-size-to-visual-size/</link>
      <pubDate>Sat, 09 May 2020 22:59:44 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2020/05/09/golang-formats-file-size-to-visual-size/</guid>
      <description>在Golang中一个文件大小一般是int64类型的整数，这个类型的对程序而言是好的，不过如果提供前端展示性的数据的话，直接返回过去多少有点太那什么了&amp;hellip;&amp;hellip;这个还需要你和前端同学协商，不官怎么说总得有一方去处理，那这么Go在如何优雅的处理这个转换过程序呢？
可定义如下函数以进行转换操作：
1 2 3 4 5 6 7 8 9 10 11 12 13 // ByteCountBinary format byte size to human readable format. func ByteCountBinary(size int64) string { const unit int64 = 1024 if size &amp;lt; unit { return fmt.Sprintf(&amp;#34;%dB&amp;#34;, size) } div, exp := unit, 0 for n := size / unit; n &amp;gt;= unit; n /= unit { div *= unit exp++ } return fmt.</description>
    </item>
    
  </channel>
</rss>
