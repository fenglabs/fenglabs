<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 晒春风的博客 - 春风十里不如你 - Ten miles of spring breeze is not as good as you</title>
    <link>https://shaichunfeng.com/tags/golang/</link>
    <description>Recent content in golang on 晒春风的博客 - 春风十里不如你 - Ten miles of spring breeze is not as good as you</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>design &amp; develop by shaichunfeng &amp;copy;</copyright>
    <lastBuildDate>Mon, 19 Jul 2021 08:00:06 +0800</lastBuildDate><atom:link href="https://shaichunfeng.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go系列教程（二十五） | Go互斥锁(Mutex)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/25-go-mutex/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:06 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/25-go-mutex/</guid>
      <description>本教程我们学习 Mutex。我们还会学习怎样通过 Mutex 和信道来处理竞态条件（Race Condition）。
临界区 在学习 Mutex 之前，我们需要理解并发编程中临界区（Critical Section）的概念。当程序并发地运行时，多个 Go 协程不应该同时访问那些修改共享资源的代码。这些修改共享资源的代码称为临界区。例如，假设我们有一段代码，将一个变量 x 自增 1。
1 x = x + 1 如果只有一个 Go 协程访问上面的代码段，那都没有任何问题。
但当有多个协程并发运行时，代码却会出错，让我们看看究竟是为什么吧。简单起见，假设在一行代码的前面，我们已经运行了两个 Go 协程。
在上一行代码的内部，系统执行程序时分为如下几个步骤（这里其实还有很多包括寄存器的技术细节，以及加法的工作原理等，但对于我们的系列教程，只需认为只有三个步骤就好了）：
获得 x 的当前值 计算 x + 1 将步骤 2 计算得到的值赋值给 x 如果只有一个协程执行上面的三个步骤，不会有问题。
我们讨论一下当有两个并发的协程执行该代码时，会发生什么。下图描述了当两个协程并发地访问代码行 x = x + 1 时，可能出现的一种情况。
我们假设 x 的初始值为 0。而协程 1 获取 x 的初始值，并计算 x + 1。而在协程 1 将计算值赋值给 x 之前，系统上下文切换到了协程 2。于是，协程 2 获取了 x 的初始值（依然为 0），并计算 x + 1。接着系统上下文又切换回了协程 1。现在，协程 1 将计算值 1 赋值给 x，因此 x 等于 1。然后，协程 2 继续开始执行，把计算值（依然是 1）复制给了 x，因此在所有协程执行完毕之后，x 都等于 1。</description>
    </item>
    
    <item>
      <title>Go系列教程（二十四） | Go Select</title>
      <link>https://shaichunfeng.com/post/2021/07/19/24-go-select/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:05 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/24-go-select/</guid>
      <description>什么是 select？ select 语句用于在多个发送/接收信道操作中进行选择。select 语句会一直阻塞，直到发送/接收操作准备就绪。如果有多个信道操作准备完毕，select 会随机地选取其中之一执行。该语法与 switch 类似，所不同的是，这里的每个 case 语句都是信道操作。我们好好看一些代码来加深理解吧。
示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func server1(ch chan string) { time.</description>
    </item>
    
    <item>
      <title>Go系列教程（二十三） | Go缓冲信道和工作池(Buffered Channels and Worker Pools)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/23-buffered-channels-and-worker-pools/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:04 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/23-buffered-channels-and-worker-pools/</guid>
      <description>什么是缓冲信道？ 在上一教程里，我们讨论的主要是无缓冲信道。我们在信道的教程里详细讨论了，无缓冲信道的发送和接收过程是阻塞的。
我们还可以创建一个有缓冲（Buffer）的信道。只在缓冲已满的情况，才会阻塞向缓冲信道（Buffered Channel）发送数据。同样，只有在缓冲为空的时候，才会阻塞从缓冲信道接收数据。
通过向 make 函数再传递一个表示容量的参数（指定缓冲的大小），可以创建缓冲信道。
1 ch := make(chan type, capacity) 要让一个信道有缓冲，上面语法中的 capacity 应该大于 0。无缓冲信道的容量默认为 0，因此我们在上一教程创建信道时，省略了容量参数。
我们开始编写代码，创建一个缓冲信道。
示例一 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import ( &amp;#34;fmt&amp;#34; ) func main() { ch := make(chan string, 2) ch &amp;lt;- &amp;#34;naveen&amp;#34; ch &amp;lt;- &amp;#34;paul&amp;#34; fmt.</description>
    </item>
    
    <item>
      <title>Go系列教程（二十二） | Go信道(channels)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/22-golang-channel/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:03 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/22-golang-channel/</guid>
      <description>在上一教程里，我们探讨了如何使用 Go 协程（Goroutine）来实现并发。我们接着在本教程里学习信道（Channel），学习如何通过信道来实现 Go 协程间的通信。
什么是信道？ 信道（通道）可以想像成 Go 协程之间通信的管道。如同管道中的水会从一端流到另一端，通过使用信道，数据也可以从一端发送，在另一端接收。
信道的声明 所有信道都关联了一个类型。信道只能运输这种类型的数据，而运输其他类型的数据都是非法的。
chan T 表示 T 类型的信道。
信道的零值为 nil。信道的零值没有什么用，应该使用 make 内置函数，来像对 Map 和 Slice 初始化那样，来定义信道。
定义：指对标志符声明并初始化，声明可以通俗的理解为指定标志符所表示的具体类型，初始化可以理解为开辟内存空间。只声明并没有对其初始化的标志符在Go语言中其默认值为类型零值。
下面编写代码，定义一个信道。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import &amp;#34;fmt&amp;#34; func main() { // 变量声明 var a chan int if a == nil { fmt.</description>
    </item>
    
    <item>
      <title>Go系列教程（二十一） | Go协程(goroutine)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/21-golang-goroutine/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:02 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/21-golang-goroutine/</guid>
      <description>在前面的教程里，我们探讨了并发，以及并发与并行的区别。本教程则会介绍在 Go 语言里，如何使用 Go 协程（Goroutine）来实现并发。
Go 协程是什么？ Go 协程是与其他函数或方法一起并发运行的函数或方法。Go 协程可以看作是轻量级线程。与线程相比，创建一个 Go 协程的成本很小。因此在 Go 应用中，常常会看到有数以千计的 Go 协程并发地运行。
Go 协程相比于线程的优势 相比线程而言，Go 协程的成本极低。堆栈大小只有若干 kb，并且可以根据应用的需求进行增减。而线程必须指定堆栈的大小，其堆栈是固定不变的。 Go 协程会复用（Multiplex）数量更少的 OS 线程。即使程序有数以千计的 Go 协程，也可能只有一个线程。如果该线程中的某一 Go 协程发生了阻塞（比如说等待用户输入），那么系统会再创建一个 OS 线程，并把其余 Go 协程都移动到这个新的 OS 线程。所有这一切都在运行时进行，作为程序员，我们没有直接面临这些复杂的细节，而是有一个简洁的 API 来处理并发。 Go 协程使用信道（Channel）来进行通信。信道用于防止多个协程访问共享内存时发生竞态条件（Race Condition）。信道可以看作是 Go 协程之间通信的管道。我们会在下一教程详细讨论信道。 如何启动一个 Go 协程？ 调用函数或者方法时，在前面加上 go 关键字，就可以让一个新的 Go 协程并发地运行。</description>
    </item>
    
    <item>
      <title>Go系列教程（二十） | 并发入门(Concurrency Getting Started)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/20-getting-started-with-concurrency/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:01 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/20-getting-started-with-concurrency/</guid>
      <description>Go 是并发式语言，而不是并行式语言。 在讨论 Go 如何处理并发之前，我们必须理解何为并发，以及并发与并行的区别。
并发是什么？ 并发是指立即处理多个任务的能力。举个例子就能很好地说明这一点。
我们可以想象一个人正在跑步。假如在他晨跑时，鞋带突然松了。于是他停下来，系一下鞋带，接下来继续跑。这个例子就是典型的并发。这个人能够一下搞定跑步和系鞋带两件事，即立即处理多个任务。
并行是什么？并行和并发有何区别？ 并行是指同时处理多个任务。这听起来和并发差不多，但其实完全不同。
我们同样用这个跑步的例子来帮助理解。假如这个人在慢跑时，还在用他的 iPod 听着音乐。在这里，他是在跑步的同时听音乐，也就是同时处理多个任务。这称之为并行。
从技术上看并发和并行 通过现实中的例子，我们已经明白了什么是并发，以及并发与并行的区别。作为一名极客，我们接下来从技术的角度来考察并发和并行。🤣
假如我们正在编写一个 web 浏览器。这个 web 浏览器有各种组件。其中两个分别是 web 页面的渲染区和从网上下载文件的下载器。假设我们已经构建好了浏览器代码，各个组件也都可以相互独立地运行（通过像 Java 里的线程，或者通过即将介绍的 Go 语言中的 Go 协程来实现）。当浏览器在单核处理器中运行时，处理器会在浏览器的两个组件间进行上下文切换。它可能在一段时间内下载文件，转而又对用户请求的 web 页面进行渲染。这就是并发。并发的进程从不同的时间点开始，分别交替运行。在这里，就是在不同的时间点开始进行下载和渲染，并相互交替运行的。
如果该浏览器在一个多核处理器上运行，此时下载文件的组件和渲染 HTML 的组件可能会在不同的核上同时运行。这称之为并行。
并行不一定会加快运行速度，因为并行运行的组件之间可能需要相互通信。在我们浏览器的例子里，当文件下载完成后，应当对用户进行提醒，比如弹出一个窗口。于是，在负责下载的组件和负责渲染用户界面的组件之间，就产生了通信。在并发系统上，这种通信开销很小。但在多核的并行系统上，组件间的通信开销就很高了。所以，并行不一定会加快运行速度！
Go 对并发的支持 Go 编程语言原生支持并发。Go 使用 Go 协程（Goroutine） 和信道（Channel）来处理并发。在接下来的教程里，我们还会详细介绍它们。
并发的介绍到此结束。请留下你的反馈和评论。感谢你的阅读。祝你过得愉快。</description>
    </item>
    
    <item>
      <title>Go语言调用C语言代码</title>
      <link>https://shaichunfeng.com/post/2021/06/21/go-call-c/</link>
      <pubDate>Mon, 21 Jun 2021 15:51:11 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/06/21/go-call-c/</guid>
      <description>Go 语言除了语法精炼、并发支持好外，还有一个优点就是可以调用 C 代码。可以直接在 Go 源代码里写 C 代码，也可以引 C 语言的外部库。这样在性能遇到瓶颈的地方可以重写，或者某些功能 Go 和第三方还缺失，但 C 语言有现成的库就可以直接用了。官方 Cgo 这块目前有一篇博客 https://blog.golang.org/c-go-cgo 和 命令行文档 https://golang.org/cmd/cgo/ 对 Cgo 进行了说明，其中某些地方还不够明确或者没有提到的地方。
Section1：Go语言内联C语言代码 下面例子是直接将 C 代码内嵌在 Go 源代码里，引入了一个不存在的包 “C”, 然后将 C 代码写在了引入上面，注意只能写在 “C” 包上面。这里定义了一个sum函数, 然后通过 C.sum 在 Go 代码里使用。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main /* 内联C语言代码 Start */ // // sum calc a and b sum value.</description>
    </item>
    
  </channel>
</rss>
