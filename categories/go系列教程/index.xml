<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go系列教程 on 晒春风的博客 - 春风十里不如你 - Ten miles of spring breeze is not as good as you</title>
    <link>https://shaichunfeng.com/categories/go%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/</link>
    <description>Recent content in Go系列教程 on 晒春风的博客 - 春风十里不如你 - Ten miles of spring breeze is not as good as you</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>design &amp; develop by shaichunfeng &amp;copy;</copyright>
    <lastBuildDate>Mon, 19 Jul 2021 08:00:36 +0800</lastBuildDate><atom:link href="https://shaichunfeng.com/categories/go%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go系列教程（三十六） | 写入文件(Write File)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/36-write-file/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:36 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/36-write-file/</guid>
      <description>在这一章我们将学习如何使用 Go 语言将数据写到文件里面。并且还要学习如何同步的写到文件里面。
这章教程包括如下几个部分：
将字符串写入文件 将字节写入文件 将数据一行一行的写入文件 追加到文件里 并发写文件 请在本地运行所有本教程的程序，因为 playground 对文件的操作支持的并不好。
将字符串写入文件 最常见的写文件就是将字符串写入文件。这个写起来非常的简单。这个包含以下几个阶段。
创建文件 将字符串写入文件 我们将得到如下代码。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { f, err := os.</description>
    </item>
    
    <item>
      <title>Go系列教程（三十五） | 读取文件(Read file)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/35-read-file/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:35 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/35-read-file/</guid>
      <description>文件读取是所有编程语言中最常见的操作之一。本教程我们会学习如何使用 Go 读取文件。
本教程分为如下小节。
将整个文件读取到内存 使用绝对文件路径 使用命令行标记来传递文件路径 将文件绑定在二进制文件中 分块读取文件 逐行读取文件 将整个文件读取到内存 将整个文件读取到内存是最基本的文件操作之一。这需要使用 ioutil 包中的 ReadFile 函数。
让我们在 Go 程序所在的目录中，读取一个文件。我已经在 GOPATH（译注：原文是 GOROOT，应该是笔误）中创建了文件夹，在该文件夹内部，有一个文本文件 test.txt，我们会使用 Go 程序 filehandling.go 来读取它。test.txt 包含文本 “Hello World. Welcome to file handling in Go”。我的文件夹结构如下：
1 2 3 4 src filehandling filehandling.go test.txt 接下来我们来看看代码。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; ) func main() { data, err := ioutil.</description>
    </item>
    
    <item>
      <title>Go系列教程（三十四） | 反射(Reflection)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/34-reflection/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:34 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/34-reflection/</guid>
      <description>反射是 Go 语言的高级主题之一。我会尽可能让它变得简单易懂。
本教程分为如下小节。
什么是反射？ 为何需要检查变量，确定变量的类型？ reflect 包 reflect.Type 和 reflect.Value reflect.Kind NumField() 和 Field() 方法 Int() 和 String() 方法 完整的程序 我们应该使用反射吗？ 让我们来逐个讨论这些章节。
什么是反射？ 反射就是程序能够在运行时检查变量和值，求出它们的类型。你可能还不太懂，这没关系。在本教程结束后，你就会清楚地理解反射，所以跟着我们的教程学习吧。
为何需要检查变量，确定变量的类型？ 在学习反射时，所有人首先面临的疑惑就是：如果程序中每个变量都是我们自己定义的，那么在编译时就可以知道变量类型了，为什么我们还需要在运行时检查变量，求出它的类型呢？没错，在大多数时候都是这样，但并非总是如此。
我来解释一下吧。下面我们编写一个简单的程序。
1 2 3 4 5 6 7 8 9 10 package main import ( &amp;#34;fmt&amp;#34; ) func main() { i := 10 fmt.</description>
    </item>
    
    <item>
      <title>Go系列教程（三十三） | 函数是一等公民(Functions Are First Class Citizens)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/33-functions-are-first-class-citizens/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:14 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/33-functions-are-first-class-citizens/</guid>
      <description>什么是头等（第一类）函数？ 支持头等函数（First Class Function）的编程语言，可以把函数赋值给变量，也可以把函数作为其它函数的参数或者返回值。Go 语言支持头等函数的机制。
本教程我们会讨论头等函数的语法和用例。
匿名函数 我们来编写一个简单的示例，把函数赋值给一个变量。
1 2 3 4 5 6 7 8 9 10 11 12 13 package main import ( &amp;#34;fmt&amp;#34; ) func main() { a := func() { fmt.Println(&amp;#34;hello world first class function&amp;#34;) } a() fmt.Printf(&amp;#34;%T&amp;#34;, a) } 在 playground 上运行
在上面的程序中，我们将一个函数赋值给了变量 a（第 8 行）。这是把函数赋值给变量的语法。你如果观察得仔细的话，会发现赋值给 a 的函数没有名称。由于没有名称，这类函数称为匿名函数（Anonymous Function）。</description>
    </item>
    
    <item>
      <title>Go系列教程（三十二） | panic 和 recover(Panic and Recover)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/32-panic-and-recover.md/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:13 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/32-panic-and-recover.md/</guid>
      <description>什么是 panic？ 在 Go 语言中，程序中一般是使用错误来处理异常情况。对于程序中出现的大部分异常情况，错误就已经够用了。
但在有些情况，当程序发生异常时，无法继续运行。在这种情况下，我们会使用 panic 来终止程序。当函数发生 panic 时，它会终止运行，在执行完所有的延迟函数后，程序控制返回到该函数的调用方。这样的过程会一直持续下去，直到当前协程的所有函数都返回退出，然后程序会打印出 panic 信息，接着打印出堆栈跟踪（Stack Trace），最后程序终止。在编写一个示例程序后，我们就能很好地理解这个概念了。
在本教程里，我们还会接着讨论，当程序发生 panic 时，使用 recover 可以重新获得对该程序的控制。
可以认为 panic 和 recover 与其他语言中的 try-catch-finally 语句类似，只不过一般我们很少使用 panic 和 recover。而当我们使用了 panic 和 recover 时，也会比 try-catch-finally 更加优雅，代码更加整洁。
什么时候应该使用 panic？ 需要注意的是，你应该尽可能地使用错误，而不是使用 panic 和 recover。只有当程序不能继续运行的时候，才应该使用 panic 和 recover 机制。
panic 有两个合理的用例。
发生了一个不能恢复的错误，此时程序不能继续运行。 一个例子就是 web 服务器无法绑定所要求的端口。在这种情况下，就应该使用 panic，因为如果不能绑定端口，啥也做不了。 发生了一个编程上的错误。 假如我们有一个接收指针参数的方法，而其他人使用 nil 作为参数调用了它。在这种情况下，我们可以使用 panic，因为这是一个编程错误：用 nil 参数调用了一个只能接收合法指针的方法。 panic 示例 内建函数 panic 的签名如下所示：</description>
    </item>
    
    <item>
      <title>Go系列教程（三十一） | 自定义错误(Custom Error)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/31-custom-error/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:12 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/31-custom-error/</guid>
      <description>在上一教程里，我们学习了 Go 中的错误是如何表示的，并学习了如何处理标准库里的错误。我们还学习了从标准库的错误中提取更多的信息。
在本教程中，我们会学习如何创建我们自己的自定义错误，并在我们创建的函数和包中使用它。我们会使用与标准库中相同的技术，来提供自定义错误的更多细节信息。
使用 New 函数创建自定义错误 创建自定义错误最简单的方法是使用 errors 包中的 New 函数。
在使用 New 函数 创建自定义错误之前，我们先来看看 New 是如何实现的。如下所示，是 errors 包 中的 New 函数的实现。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Package errors implements functions to manipulate errors. package errors // New returns an error that formats as the given text.</description>
    </item>
    
    <item>
      <title>Go系列教程（三十） | 错误处理(Error Handle)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/30-error-handle.md/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:11 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/30-error-handle.md/</guid>
      <description>什么是错误？ 错误表示程序中出现了异常情况。比如当我们试图打开一个文件时，文件系统里却并没有这个文件。这就是异常情况，它用一个错误来表示。
在 Go 中，错误一直是很常见的。错误用内建的 error 类型来表示。
就像其他的内建类型（如 int、float64 等），错误值可以存储在变量里、作为函数的返回值等等。
示例 现在我们开始编写一个示例，该程序试图打开一个并不存在的文件。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { f, err := os.Open(&amp;#34;/test.txt&amp;#34;) if err != nil { fmt.Println(err) return } fmt.Println(f.Name(), &amp;#34;opened successfully&amp;#34;) } 在 playground 中运行</description>
    </item>
    
    <item>
      <title>Go系列教程（二十九） | 延迟调用(Defer) </title>
      <link>https://shaichunfeng.com/post/2021/07/19/29-defer/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:10 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/29-defer/</guid>
      <description>什么是 defer？ defer 语句的用途是：含有 defer 语句的函数，会在该函数将要返回之前，调用另一个函数。这个定义可能看起来很复杂，我们通过一个示例就很容易明白了。
示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( &amp;#34;fmt&amp;#34; ) func finished() { fmt.Println(&amp;#34;Finished finding largest&amp;#34;) } func largest(nums []int) { defer finished() fmt.</description>
    </item>
    
    <item>
      <title>Go系列教程（二十八） | 多态(Polymorphism)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/28-polymorphism/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:09 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/28-polymorphism/</guid>
      <description>Go 通过接口来实现多态。我们已经讨论过，在 Go 语言中，我们是隐式地实现接口。一个类型如果定义了接口所声明的全部方法，那它就实现了该接口。现在我们来看看，利用接口，Go 是如何实现多态的。
使用接口实现多态 一个类型如果定义了接口的所有方法，那它就隐式地实现了该接口。
所有实现了接口的类型，都可以把它的值保存在一个接口类型的变量中。在 Go 中，我们使用接口的这种特性来实现多态。
通过一个程序我们来理解 Go 语言的多态，它会计算一个组织机构的净收益。为了简单起见，我们假设这个虚构的组织所获得的收入来源于两个项目：fixed billing 和 time and material。该组织的净收益等于这两个项目的收入总和。同样为了简单起见，我们假设货币单位是美元，而无需处理美分。因此货币只需简单地用 int 来表示。（我建议阅读 https://forum.golangbridge.org/t/what-is-the-proper-golang-equivalent-to-decimal-when-dealing-with-money/413 上的文章，学习如何表示美分。感谢 Andreas Matuschek 在评论区指出这一点。）
我们首先定义一个接口 Income。
1 2 3 4 type Income interface { calculate() int source() string } 上面定义了接口 Interface，它包含了两个方法：calculate() 计算并返回项目的收入，而 source() 返回项目名称。
下面我们定义一个表示 FixedBilling 项目的结构体类型。
1 2 3 4 type FixedBilling struct { projectName string biddedAmount int } 项目 FixedBillin 有两个字段：projectName 表示项目名称，而 biddedAmount 表示组织向该项目投标的金额。</description>
    </item>
    
    <item>
      <title>Go系列教程（二十七） | 组合替代继承(Combination Replaces Inheritance)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/27-combination-replaces-inheritance/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:08 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/27-combination-replaces-inheritance/</guid>
      <description>Go 不支持继承，但它支持组合（Composition）。组合一般定义为“合并在一起”。汽车就是一个关于组合的例子：一辆汽车由车轮、引擎和其他各种部件组合在一起。
通过嵌套结构体进行组合 在 Go 中，通过在结构体内嵌套结构体，可以实现组合。
组合的典型例子就是博客帖子。每一个博客的帖子都有标题、内容和作者信息。使用组合可以很好地表示它们。通过学习本教程后面的内容，我们会知道如何实现组合。
我们首先创建一个 author 结构体。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import ( &amp;#34;fmt&amp;#34; ) type author struct { firstName string lastName string bio string } func (a author) fullName() string { return fmt.Sprintf(&amp;#34;%s %s&amp;#34;, a.</description>
    </item>
    
    <item>
      <title>Go系列教程（二十六） | 结构体(Struct)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/26-struct/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:07 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/26-struct/</guid>
      <description>Go 支持面向对象吗？ Go 并不是完全面向对象的编程语言。Go 官网的 FAQ 回答了 Go 是否是面向对象语言，摘录如下。
可以说是，也可以说不是。虽然 Go 有类型和方法，支持面向对象的编程风格，但却没有类型的层次结构。Go 中的“接口”概念提供了一种不同的方法，我们认为它易于使用，也更为普遍。Go 也可以将结构体嵌套使用，这与子类化（Subclassing）类似，但并不完全相同。此外，Go 提供的特性比 C++ 或 Java 更为通用：子类可以由任何类型的数据来定义，甚至是内建类型（如简单的“未装箱的”整型）。这在结构体（类）中没有受到限制。
在接下来的教程里，我们会讨论如何使用 Go 来实现面向对象编程概念。与其它面向对象语言（如 Java）相比，Go 有很多完全不同的特性。
使用结构体，而非类 Go 不支持类，而是提供了结构体。结构体中可以添加方法。这样可以将数据和操作数据的方法绑定在一起，实现与类相似的效果。
为了加深理解，我们来编写一个示例吧。
在示例中，我们创建一个自定义包，它帮助我们更好地理解，结构体是如何有效地取代类的。
在你的 Go 工作区创建一个名为 oop 的文件夹。在 opp 中再创建子文件夹 employee。在 employee 内，创建一个名为 employee.go 的文件。
文件夹结构会是这样：
1 workspacepath -&amp;gt; oop -&amp;gt; employee -&amp;gt; employee.go 请将 employee.</description>
    </item>
    
    <item>
      <title>Go系列教程（二十五） | Go互斥锁(Mutex)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/25-go-mutex/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:06 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/25-go-mutex/</guid>
      <description>本教程我们学习 Mutex。我们还会学习怎样通过 Mutex 和信道来处理竞态条件（Race Condition）。
临界区 在学习 Mutex 之前，我们需要理解并发编程中临界区（Critical Section）的概念。当程序并发地运行时，多个 Go 协程不应该同时访问那些修改共享资源的代码。这些修改共享资源的代码称为临界区。例如，假设我们有一段代码，将一个变量 x 自增 1。
1 x = x + 1 如果只有一个 Go 协程访问上面的代码段，那都没有任何问题。
但当有多个协程并发运行时，代码却会出错，让我们看看究竟是为什么吧。简单起见，假设在一行代码的前面，我们已经运行了两个 Go 协程。
在上一行代码的内部，系统执行程序时分为如下几个步骤（这里其实还有很多包括寄存器的技术细节，以及加法的工作原理等，但对于我们的系列教程，只需认为只有三个步骤就好了）：
获得 x 的当前值 计算 x + 1 将步骤 2 计算得到的值赋值给 x 如果只有一个协程执行上面的三个步骤，不会有问题。
我们讨论一下当有两个并发的协程执行该代码时，会发生什么。下图描述了当两个协程并发地访问代码行 x = x + 1 时，可能出现的一种情况。
我们假设 x 的初始值为 0。而协程 1 获取 x 的初始值，并计算 x + 1。而在协程 1 将计算值赋值给 x 之前，系统上下文切换到了协程 2。于是，协程 2 获取了 x 的初始值（依然为 0），并计算 x + 1。接着系统上下文又切换回了协程 1。现在，协程 1 将计算值 1 赋值给 x，因此 x 等于 1。然后，协程 2 继续开始执行，把计算值（依然是 1）复制给了 x，因此在所有协程执行完毕之后，x 都等于 1。</description>
    </item>
    
    <item>
      <title>Go系列教程（二十四） | Go Select</title>
      <link>https://shaichunfeng.com/post/2021/07/19/24-go-select/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:05 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/24-go-select/</guid>
      <description>什么是 select？ select 语句用于在多个发送/接收信道操作中进行选择。select 语句会一直阻塞，直到发送/接收操作准备就绪。如果有多个信道操作准备完毕，select 会随机地选取其中之一执行。该语法与 switch 类似，所不同的是，这里的每个 case 语句都是信道操作。我们好好看一些代码来加深理解吧。
示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func server1(ch chan string) { time.</description>
    </item>
    
    <item>
      <title>Go系列教程（二十三） | Go缓冲信道和工作池(Buffered Channels and Worker Pools)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/23-buffered-channels-and-worker-pools/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:04 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/23-buffered-channels-and-worker-pools/</guid>
      <description>什么是缓冲信道？ 在上一教程里，我们讨论的主要是无缓冲信道。我们在信道的教程里详细讨论了，无缓冲信道的发送和接收过程是阻塞的。
我们还可以创建一个有缓冲（Buffer）的信道。只在缓冲已满的情况，才会阻塞向缓冲信道（Buffered Channel）发送数据。同样，只有在缓冲为空的时候，才会阻塞从缓冲信道接收数据。
通过向 make 函数再传递一个表示容量的参数（指定缓冲的大小），可以创建缓冲信道。
1 ch := make(chan type, capacity) 要让一个信道有缓冲，上面语法中的 capacity 应该大于 0。无缓冲信道的容量默认为 0，因此我们在上一教程创建信道时，省略了容量参数。
我们开始编写代码，创建一个缓冲信道。
示例一 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import ( &amp;#34;fmt&amp;#34; ) func main() { ch := make(chan string, 2) ch &amp;lt;- &amp;#34;naveen&amp;#34; ch &amp;lt;- &amp;#34;paul&amp;#34; fmt.</description>
    </item>
    
    <item>
      <title>Go系列教程（二十二） | Go信道(channels)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/22-golang-channel/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:03 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/22-golang-channel/</guid>
      <description>在上一教程里，我们探讨了如何使用 Go 协程（Goroutine）来实现并发。我们接着在本教程里学习信道（Channel），学习如何通过信道来实现 Go 协程间的通信。
什么是信道？ 信道（通道）可以想像成 Go 协程之间通信的管道。如同管道中的水会从一端流到另一端，通过使用信道，数据也可以从一端发送，在另一端接收。
信道的声明 所有信道都关联了一个类型。信道只能运输这种类型的数据，而运输其他类型的数据都是非法的。
chan T 表示 T 类型的信道。
信道的零值为 nil。信道的零值没有什么用，应该使用 make 内置函数，来像对 Map 和 Slice 初始化那样，来定义信道。
定义：指对标志符声明并初始化，声明可以通俗的理解为指定标志符所表示的具体类型，初始化可以理解为开辟内存空间。只声明并没有对其初始化的标志符在Go语言中其默认值为类型零值。
下面编写代码，定义一个信道。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import &amp;#34;fmt&amp;#34; func main() { // 变量声明 var a chan int if a == nil { fmt.</description>
    </item>
    
    <item>
      <title>Go系列教程（二十一） | Go协程(goroutine)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/21-golang-goroutine/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:02 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/21-golang-goroutine/</guid>
      <description>在前面的教程里，我们探讨了并发，以及并发与并行的区别。本教程则会介绍在 Go 语言里，如何使用 Go 协程（Goroutine）来实现并发。
Go 协程是什么？ Go 协程是与其他函数或方法一起并发运行的函数或方法。Go 协程可以看作是轻量级线程。与线程相比，创建一个 Go 协程的成本很小。因此在 Go 应用中，常常会看到有数以千计的 Go 协程并发地运行。
Go 协程相比于线程的优势 相比线程而言，Go 协程的成本极低。堆栈大小只有若干 kb，并且可以根据应用的需求进行增减。而线程必须指定堆栈的大小，其堆栈是固定不变的。 Go 协程会复用（Multiplex）数量更少的 OS 线程。即使程序有数以千计的 Go 协程，也可能只有一个线程。如果该线程中的某一 Go 协程发生了阻塞（比如说等待用户输入），那么系统会再创建一个 OS 线程，并把其余 Go 协程都移动到这个新的 OS 线程。所有这一切都在运行时进行，作为程序员，我们没有直接面临这些复杂的细节，而是有一个简洁的 API 来处理并发。 Go 协程使用信道（Channel）来进行通信。信道用于防止多个协程访问共享内存时发生竞态条件（Race Condition）。信道可以看作是 Go 协程之间通信的管道。我们会在下一教程详细讨论信道。 如何启动一个 Go 协程？ 调用函数或者方法时，在前面加上 go 关键字，就可以让一个新的 Go 协程并发地运行。</description>
    </item>
    
    <item>
      <title>Go系列教程（二十） | 并发入门(Concurrency Getting Started)</title>
      <link>https://shaichunfeng.com/post/2021/07/19/20-getting-started-with-concurrency/</link>
      <pubDate>Mon, 19 Jul 2021 08:00:01 +0800</pubDate>
      
      <guid>https://shaichunfeng.com/post/2021/07/19/20-getting-started-with-concurrency/</guid>
      <description>Go 是并发式语言，而不是并行式语言。 在讨论 Go 如何处理并发之前，我们必须理解何为并发，以及并发与并行的区别。
并发是什么？ 并发是指立即处理多个任务的能力。举个例子就能很好地说明这一点。
我们可以想象一个人正在跑步。假如在他晨跑时，鞋带突然松了。于是他停下来，系一下鞋带，接下来继续跑。这个例子就是典型的并发。这个人能够一下搞定跑步和系鞋带两件事，即立即处理多个任务。
并行是什么？并行和并发有何区别？ 并行是指同时处理多个任务。这听起来和并发差不多，但其实完全不同。
我们同样用这个跑步的例子来帮助理解。假如这个人在慢跑时，还在用他的 iPod 听着音乐。在这里，他是在跑步的同时听音乐，也就是同时处理多个任务。这称之为并行。
从技术上看并发和并行 通过现实中的例子，我们已经明白了什么是并发，以及并发与并行的区别。作为一名极客，我们接下来从技术的角度来考察并发和并行。🤣
假如我们正在编写一个 web 浏览器。这个 web 浏览器有各种组件。其中两个分别是 web 页面的渲染区和从网上下载文件的下载器。假设我们已经构建好了浏览器代码，各个组件也都可以相互独立地运行（通过像 Java 里的线程，或者通过即将介绍的 Go 语言中的 Go 协程来实现）。当浏览器在单核处理器中运行时，处理器会在浏览器的两个组件间进行上下文切换。它可能在一段时间内下载文件，转而又对用户请求的 web 页面进行渲染。这就是并发。并发的进程从不同的时间点开始，分别交替运行。在这里，就是在不同的时间点开始进行下载和渲染，并相互交替运行的。
如果该浏览器在一个多核处理器上运行，此时下载文件的组件和渲染 HTML 的组件可能会在不同的核上同时运行。这称之为并行。
并行不一定会加快运行速度，因为并行运行的组件之间可能需要相互通信。在我们浏览器的例子里，当文件下载完成后，应当对用户进行提醒，比如弹出一个窗口。于是，在负责下载的组件和负责渲染用户界面的组件之间，就产生了通信。在并发系统上，这种通信开销很小。但在多核的并行系统上，组件间的通信开销就很高了。所以，并行不一定会加快运行速度！
Go 对并发的支持 Go 编程语言原生支持并发。Go 使用 Go 协程（Goroutine） 和信道（Channel）来处理并发。在接下来的教程里，我们还会详细介绍它们。
并发的介绍到此结束。请留下你的反馈和评论。感谢你的阅读。祝你过得愉快。</description>
    </item>
    
  </channel>
</rss>
